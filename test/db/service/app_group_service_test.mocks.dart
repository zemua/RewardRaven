// Mocks generated by Mockito 5.4.4 from annotations
// in reward_raven/test/db/service/app_group_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:logger/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:reward_raven/db/entity/app_group.dart' as _i5;
import 'package:reward_raven/db/repository/app_group_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppGroupRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppGroupRepository extends _i1.Mock
    implements _i3.AppGroupRepository {
  MockAppGroupRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);

  @override
  _i4.Future<void> saveGroup(_i5.AppGroup? group) => (super.noSuchMethod(
        Invocation.method(
          #saveGroup,
          [group],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateGroup(
    String? key,
    _i5.AppGroup? group,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [
            key,
            group,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.AppGroup?> getGroup(
    _i5.GroupType? type,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroup,
          [
            type,
            key,
          ],
        ),
        returnValue: _i4.Future<_i5.AppGroup?>.value(),
      ) as _i4.Future<_i5.AppGroup?>);

  @override
  _i4.Future<List<_i5.AppGroup>> getGroups(_i5.GroupType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroups,
          [type],
        ),
        returnValue: _i4.Future<List<_i5.AppGroup>>.value(<_i5.AppGroup>[]),
      ) as _i4.Future<List<_i5.AppGroup>>);

  @override
  _i4.Stream<List<_i5.AppGroup>> streamGroups(_i5.GroupType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroups,
          [type],
        ),
        returnValue: _i4.Stream<List<_i5.AppGroup>>.empty(),
      ) as _i4.Stream<List<_i5.AppGroup>>);
}
