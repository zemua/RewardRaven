// Mocks generated by Mockito 5.4.4 from annotations
// in reward_raven/test/db/service/group_condition_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:logger/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:reward_raven/db/entity/group_condition.dart' as _i5;
import 'package:reward_raven/db/repository/group_condition_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GroupConditionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupConditionRepository extends _i1.Mock
    implements _i3.GroupConditionRepository {
  MockGroupConditionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);

  @override
  _i4.Future<void> saveGroupCondition(_i5.GroupCondition? condition) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveGroupCondition,
          [condition],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateGroupCondition(_i5.GroupCondition? condition) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroupCondition,
          [condition],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteGroupCondition(_i5.GroupCondition? condition) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteGroupCondition,
          [condition],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.GroupCondition?> getGroupConditionByIds({
    required String? conditionedGroupId,
    required String? conditionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupConditionByIds,
          [],
          {
            #conditionedGroupId: conditionedGroupId,
            #conditionId: conditionId,
          },
        ),
        returnValue: _i4.Future<_i5.GroupCondition?>.value(),
      ) as _i4.Future<_i5.GroupCondition?>);

  @override
  _i4.Future<List<_i5.GroupCondition>> getGroupConditions(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupConditions,
          [groupId],
        ),
        returnValue:
            _i4.Future<List<_i5.GroupCondition>>.value(<_i5.GroupCondition>[]),
      ) as _i4.Future<List<_i5.GroupCondition>>);

  @override
  _i4.Stream<List<_i5.GroupCondition>> streamGroupConditions(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroupConditions,
          [groupId],
        ),
        returnValue: _i4.Stream<List<_i5.GroupCondition>>.empty(),
      ) as _i4.Stream<List<_i5.GroupCondition>>);
}
