// Mocks generated by Mockito 5.4.4 from annotations
// in reward_raven/test/screens/appgroups/editgroup/tabs/condition/edit_condition_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i9;

import 'package:flutter/material.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:reward_raven/db/entity/app_group.dart' as _i6;
import 'package:reward_raven/db/entity/group_condition.dart' as _i4;
import 'package:reward_raven/db/service/app_group_service.dart' as _i5;
import 'package:reward_raven/db/service/group_condition_service.dart' as _i2;
import 'package:reward_raven/tools/injectable_time_picker.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GroupConditionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupConditionService extends _i1.Mock
    implements _i2.GroupConditionService {
  MockGroupConditionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.GroupCondition?> getGroupCondition({
    required String? conditionedGroupId,
    required String? conditionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupCondition,
          [],
          {
            #conditionedGroupId: conditionedGroupId,
            #conditionId: conditionId,
          },
        ),
        returnValue: _i3.Future<_i4.GroupCondition?>.value(),
      ) as _i3.Future<_i4.GroupCondition?>);

  @override
  _i3.Future<List<_i4.GroupCondition>> getGroupConditions(
          String? conditionedGroupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupConditions,
          [conditionedGroupId],
        ),
        returnValue:
            _i3.Future<List<_i4.GroupCondition>>.value(<_i4.GroupCondition>[]),
      ) as _i3.Future<List<_i4.GroupCondition>>);

  @override
  _i3.Stream<List<_i4.GroupCondition>> streamGroupConditions(
          String? conditionedGroupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroupConditions,
          [conditionedGroupId],
        ),
        returnValue: _i3.Stream<List<_i4.GroupCondition>>.empty(),
      ) as _i3.Stream<List<_i4.GroupCondition>>);

  @override
  _i3.Future<void> saveGroupCondition(_i4.GroupCondition? groupCondition) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveGroupCondition,
          [groupCondition],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateGroupCondition(_i4.GroupCondition? groupCondition) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroupCondition,
          [groupCondition],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteGroupCondition(_i4.GroupCondition? groupCondition) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteGroupCondition,
          [groupCondition],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [AppGroupService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppGroupService extends _i1.Mock implements _i5.AppGroupService {
  MockAppGroupService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveGroup(_i6.AppGroup? group) => (super.noSuchMethod(
        Invocation.method(
          #saveGroup,
          [group],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateGroup(
    String? key,
    _i6.AppGroup? group,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [
            key,
            group,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i6.AppGroup?> getGroup(
    _i6.GroupType? type,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroup,
          [
            type,
            key,
          ],
        ),
        returnValue: _i3.Future<_i6.AppGroup?>.value(),
      ) as _i3.Future<_i6.AppGroup?>);

  @override
  _i3.Future<List<_i6.AppGroup>> getGroups(_i6.GroupType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroups,
          [type],
        ),
        returnValue: _i3.Future<List<_i6.AppGroup>>.value(<_i6.AppGroup>[]),
      ) as _i3.Future<List<_i6.AppGroup>>);

  @override
  _i3.Stream<List<_i6.AppGroup>> streamGroups(_i6.GroupType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroups,
          [type],
        ),
        returnValue: _i3.Stream<List<_i6.AppGroup>>.empty(),
      ) as _i3.Stream<List<_i6.AppGroup>>);
}

/// A class which mocks [InjectableTimePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInjectableTimePicker extends _i1.Mock
    implements _i7.InjectableTimePicker {
  MockInjectableTimePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<Duration?> pickTime(
    _i8.BuildContext? context,
    _i8.State<_i8.StatefulWidget>? state,
    Duration? selectedTime,
    _i8.TextEditingController? timeController,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickTime,
          [
            context,
            state,
            selectedTime,
            timeController,
          ],
        ),
        returnValue: _i3.Future<Duration?>.value(),
      ) as _i3.Future<Duration?>);

  @override
  _i3.Future<_i8.TimeOfDay?> showPicker({
    required _i8.BuildContext? context,
    required _i8.TimeOfDay? initialTime,
    _i8.TransitionBuilder? builder,
    bool? barrierDismissible = true,
    _i9.Color? barrierColor,
    String? barrierLabel,
    bool? useRootNavigator = true,
    _i8.TimePickerEntryMode? initialEntryMode = _i8.TimePickerEntryMode.dial,
    String? cancelText,
    String? confirmText,
    String? helpText,
    String? errorInvalidText,
    String? hourLabelText,
    String? minuteLabelText,
    _i8.RouteSettings? routeSettings,
    _i8.EntryModeChangeCallback? onEntryModeChanged,
    _i9.Offset? anchorPoint,
    _i8.Orientation? orientation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showPicker,
          [],
          {
            #context: context,
            #initialTime: initialTime,
            #builder: builder,
            #barrierDismissible: barrierDismissible,
            #barrierColor: barrierColor,
            #barrierLabel: barrierLabel,
            #useRootNavigator: useRootNavigator,
            #initialEntryMode: initialEntryMode,
            #cancelText: cancelText,
            #confirmText: confirmText,
            #helpText: helpText,
            #errorInvalidText: errorInvalidText,
            #hourLabelText: hourLabelText,
            #minuteLabelText: minuteLabelText,
            #routeSettings: routeSettings,
            #onEntryModeChanged: onEntryModeChanged,
            #anchorPoint: anchorPoint,
            #orientation: orientation,
          },
        ),
        returnValue: _i3.Future<_i8.TimeOfDay?>.value(),
      ) as _i3.Future<_i8.TimeOfDay?>);
}
