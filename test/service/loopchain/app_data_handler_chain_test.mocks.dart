// Mocks generated by Mockito 5.4.4 from annotations
// in reward_raven/test/service/loopchain/app_data_handler_chain_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter/services.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:reward_raven/db/entity/app_group.dart' as _i11;
import 'package:reward_raven/db/entity/group_condition.dart' as _i13;
import 'package:reward_raven/db/entity/listed_app.dart' as _i8;
import 'package:reward_raven/db/entity/time_log.dart' as _i2;
import 'package:reward_raven/db/service/app_group_service.dart' as _i10;
import 'package:reward_raven/db/service/group_condition_service.dart' as _i12;
import 'package:reward_raven/db/service/listed_app_service.dart' as _i6;
import 'package:reward_raven/db/service/time_log_service.dart' as _i15;
import 'package:reward_raven/screens/apps/app_list_type.dart' as _i9;
import 'package:reward_raven/service/app_blocker.dart' as _i16;
import 'package:reward_raven/service/condition_checker.dart' as _i14;
import 'package:reward_raven/service/platform_wrapper.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTimeLog_0 extends _i1.SmartFake implements _i2.TimeLog {
  _FakeTimeLog_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMethodCodec_1 extends _i1.SmartFake implements _i3.MethodCodec {
  _FakeMethodCodec_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBinaryMessenger_2 extends _i1.SmartFake
    implements _i3.BinaryMessenger {
  _FakeBinaryMessenger_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PlatformWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformWrapper extends _i1.Mock implements _i4.PlatformWrapper {
  @override
  String get platformName => (super.noSuchMethod(
        Invocation.getter(#platformName),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
      ) as String);

  @override
  bool isAndroid() => (super.noSuchMethod(
        Invocation.method(
          #isAndroid,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [ListedAppService].
///
/// See the documentation for Mockito's code generation for more information.
class MockListedAppService extends _i1.Mock implements _i6.ListedAppService {
  @override
  _i7.Future<void> saveListedApp(_i8.ListedApp? app) => (super.noSuchMethod(
        Invocation.method(
          #saveListedApp,
          [app],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateListedApp(_i8.ListedApp? app) => (super.noSuchMethod(
        Invocation.method(
          #updateListedApp,
          [app],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteListedApp(_i8.ListedApp? app) => (super.noSuchMethod(
        Invocation.method(
          #deleteListedApp,
          [app],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i8.ListedApp?> getListedAppById(String? identifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListedAppById,
          [identifier],
        ),
        returnValue: _i7.Future<_i8.ListedApp?>.value(),
        returnValueForMissingStub: _i7.Future<_i8.ListedApp?>.value(),
      ) as _i7.Future<_i8.ListedApp?>);

  @override
  _i7.Future<List<_i8.ListedApp>> fetchListedAppsByType(
          _i9.AppListType? listType) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchListedAppsByType,
          [listType],
        ),
        returnValue: _i7.Future<List<_i8.ListedApp>>.value(<_i8.ListedApp>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i8.ListedApp>>.value(<_i8.ListedApp>[]),
      ) as _i7.Future<List<_i8.ListedApp>>);

  @override
  _i7.Future<_i8.AppStatus> fetchStatus(String? identifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchStatus,
          [identifier],
        ),
        returnValue: _i7.Future<_i8.AppStatus>.value(_i8.AppStatus.positive),
        returnValueForMissingStub:
            _i7.Future<_i8.AppStatus>.value(_i8.AppStatus.positive),
      ) as _i7.Future<_i8.AppStatus>);
}

/// A class which mocks [AppGroupService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppGroupService extends _i1.Mock implements _i10.AppGroupService {
  @override
  _i7.Future<void> saveGroup(_i11.AppGroup? group) => (super.noSuchMethod(
        Invocation.method(
          #saveGroup,
          [group],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateGroup(
    String? key,
    _i11.AppGroup? group,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [
            key,
            group,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i11.AppGroup?> getGroup(
    _i11.GroupType? type,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroup,
          [
            type,
            key,
          ],
        ),
        returnValue: _i7.Future<_i11.AppGroup?>.value(),
        returnValueForMissingStub: _i7.Future<_i11.AppGroup?>.value(),
      ) as _i7.Future<_i11.AppGroup?>);

  @override
  _i7.Future<List<_i11.AppGroup>> getGroups(_i11.GroupType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroups,
          [type],
        ),
        returnValue: _i7.Future<List<_i11.AppGroup>>.value(<_i11.AppGroup>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i11.AppGroup>>.value(<_i11.AppGroup>[]),
      ) as _i7.Future<List<_i11.AppGroup>>);

  @override
  _i7.Stream<List<_i11.AppGroup>> streamGroups(_i11.GroupType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroups,
          [type],
        ),
        returnValue: _i7.Stream<List<_i11.AppGroup>>.empty(),
        returnValueForMissingStub: _i7.Stream<List<_i11.AppGroup>>.empty(),
      ) as _i7.Stream<List<_i11.AppGroup>>);
}

/// A class which mocks [GroupConditionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupConditionService extends _i1.Mock
    implements _i12.GroupConditionService {
  @override
  _i7.Future<_i13.GroupCondition?> getGroupCondition({
    required String? conditionedGroupId,
    required String? conditionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupCondition,
          [],
          {
            #conditionedGroupId: conditionedGroupId,
            #conditionId: conditionId,
          },
        ),
        returnValue: _i7.Future<_i13.GroupCondition?>.value(),
        returnValueForMissingStub: _i7.Future<_i13.GroupCondition?>.value(),
      ) as _i7.Future<_i13.GroupCondition?>);

  @override
  _i7.Future<List<_i13.GroupCondition>> getGroupConditions(
          String? conditionedGroupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupConditions,
          [conditionedGroupId],
        ),
        returnValue: _i7.Future<List<_i13.GroupCondition>>.value(
            <_i13.GroupCondition>[]),
        returnValueForMissingStub: _i7.Future<List<_i13.GroupCondition>>.value(
            <_i13.GroupCondition>[]),
      ) as _i7.Future<List<_i13.GroupCondition>>);

  @override
  _i7.Stream<List<_i13.GroupCondition>> streamGroupConditions(
          String? conditionedGroupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroupConditions,
          [conditionedGroupId],
        ),
        returnValue: _i7.Stream<List<_i13.GroupCondition>>.empty(),
        returnValueForMissingStub:
            _i7.Stream<List<_i13.GroupCondition>>.empty(),
      ) as _i7.Stream<List<_i13.GroupCondition>>);

  @override
  _i7.Future<void> saveGroupCondition(_i13.GroupCondition? groupCondition) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveGroupCondition,
          [groupCondition],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateGroupCondition(_i13.GroupCondition? groupCondition) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroupCondition,
          [groupCondition],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteGroupCondition(_i13.GroupCondition? groupCondition) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteGroupCondition,
          [groupCondition],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [ConditionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockConditionChecker extends _i1.Mock implements _i14.ConditionChecker {
  @override
  _i7.Future<bool> isConditionMet(_i13.GroupCondition? condition) =>
      (super.noSuchMethod(
        Invocation.method(
          #isConditionMet,
          [condition],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [TimeLogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeLogService extends _i1.Mock implements _i15.TimeLogService {
  @override
  _i7.Future<void> addToTotal(_i2.TimeLog? timelog) => (super.noSuchMethod(
        Invocation.method(
          #addToTotal,
          [timelog],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i2.TimeLog> getTotalDuration() => (super.noSuchMethod(
        Invocation.method(
          #getTotalDuration,
          [],
        ),
        returnValue: _i7.Future<_i2.TimeLog>.value(_FakeTimeLog_0(
          this,
          Invocation.method(
            #getTotalDuration,
            [],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i2.TimeLog>.value(_FakeTimeLog_0(
          this,
          Invocation.method(
            #getTotalDuration,
            [],
          ),
        )),
      ) as _i7.Future<_i2.TimeLog>);

  @override
  _i7.Future<void> addToGroup(
    _i2.TimeLog? timelog,
    String? groupId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToGroup,
          [
            timelog,
            groupId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i2.TimeLog> getGroupDurationForLastDays(
    String? groupId,
    int? lastDays,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupDurationForLastDays,
          [
            groupId,
            lastDays,
          ],
        ),
        returnValue: _i7.Future<_i2.TimeLog>.value(_FakeTimeLog_0(
          this,
          Invocation.method(
            #getGroupDurationForLastDays,
            [
              groupId,
              lastDays,
            ],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i2.TimeLog>.value(_FakeTimeLog_0(
          this,
          Invocation.method(
            #getGroupDurationForLastDays,
            [
              groupId,
              lastDays,
            ],
          ),
        )),
      ) as _i7.Future<_i2.TimeLog>);
}

/// A class which mocks [AppBlocker].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppBlocker extends _i1.Mock implements _i16.AppBlocker {
  @override
  _i7.Future<void> blockApp(
    _i3.MethodChannel? appNativeChannel,
    String? identifier,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #blockApp,
          [
            appNativeChannel,
            identifier,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [MethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannel extends _i1.Mock implements _i3.MethodChannel {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i3.MethodCodec get codec => (super.noSuchMethod(
        Invocation.getter(#codec),
        returnValue: _FakeMethodCodec_1(
          this,
          Invocation.getter(#codec),
        ),
        returnValueForMissingStub: _FakeMethodCodec_1(
          this,
          Invocation.getter(#codec),
        ),
      ) as _i3.MethodCodec);

  @override
  _i3.BinaryMessenger get binaryMessenger => (super.noSuchMethod(
        Invocation.getter(#binaryMessenger),
        returnValue: _FakeBinaryMessenger_2(
          this,
          Invocation.getter(#binaryMessenger),
        ),
        returnValueForMissingStub: _FakeBinaryMessenger_2(
          this,
          Invocation.getter(#binaryMessenger),
        ),
      ) as _i3.BinaryMessenger);

  @override
  _i7.Future<T?> invokeMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);

  @override
  _i7.Future<List<T>?> invokeListMethod<T>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeListMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i7.Future<List<T>?>.value(),
        returnValueForMissingStub: _i7.Future<List<T>?>.value(),
      ) as _i7.Future<List<T>?>);

  @override
  _i7.Future<Map<K, V>?> invokeMapMethod<K, V>(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMapMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i7.Future<Map<K, V>?>.value(),
        returnValueForMissingStub: _i7.Future<Map<K, V>?>.value(),
      ) as _i7.Future<Map<K, V>?>);

  @override
  void setMethodCallHandler(
          _i7.Future<dynamic> Function(_i3.MethodCall)? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setMethodCallHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
}
