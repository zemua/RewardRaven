// Mocks generated by Mockito 5.4.4 from annotations
// in reward_raven/test/service/loopchain/app_data_handler_chain_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:reward_raven/db/entity/app_group.dart' as _i9;
import 'package:reward_raven/db/entity/group_condition.dart' as _i11;
import 'package:reward_raven/db/entity/listed_app.dart' as _i6;
import 'package:reward_raven/db/service/app_group_service.dart' as _i8;
import 'package:reward_raven/db/service/group_condition_service.dart' as _i10;
import 'package:reward_raven/db/service/listed_app_service.dart' as _i4;
import 'package:reward_raven/screens/apps/app_list_type.dart' as _i7;
import 'package:reward_raven/service/platform_wrapper.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PlatformWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformWrapper extends _i1.Mock implements _i2.PlatformWrapper {
  @override
  String get platformName => (super.noSuchMethod(
        Invocation.getter(#platformName),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#platformName),
        ),
      ) as String);

  @override
  bool isAndroid() => (super.noSuchMethod(
        Invocation.method(
          #isAndroid,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [ListedAppService].
///
/// See the documentation for Mockito's code generation for more information.
class MockListedAppService extends _i1.Mock implements _i4.ListedAppService {
  @override
  _i5.Future<void> saveListedApp(_i6.ListedApp? app) => (super.noSuchMethod(
        Invocation.method(
          #saveListedApp,
          [app],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateListedApp(_i6.ListedApp? app) => (super.noSuchMethod(
        Invocation.method(
          #updateListedApp,
          [app],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteListedApp(_i6.ListedApp? app) => (super.noSuchMethod(
        Invocation.method(
          #deleteListedApp,
          [app],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i6.ListedApp?> getListedAppById(String? identifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListedAppById,
          [identifier],
        ),
        returnValue: _i5.Future<_i6.ListedApp?>.value(),
        returnValueForMissingStub: _i5.Future<_i6.ListedApp?>.value(),
      ) as _i5.Future<_i6.ListedApp?>);

  @override
  _i5.Future<List<_i6.ListedApp>> fetchListedAppsByType(
          _i7.AppListType? listType) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchListedAppsByType,
          [listType],
        ),
        returnValue: _i5.Future<List<_i6.ListedApp>>.value(<_i6.ListedApp>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i6.ListedApp>>.value(<_i6.ListedApp>[]),
      ) as _i5.Future<List<_i6.ListedApp>>);

  @override
  _i5.Future<_i6.AppStatus> fetchStatus(String? identifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchStatus,
          [identifier],
        ),
        returnValue: _i5.Future<_i6.AppStatus>.value(_i6.AppStatus.positive),
        returnValueForMissingStub:
            _i5.Future<_i6.AppStatus>.value(_i6.AppStatus.positive),
      ) as _i5.Future<_i6.AppStatus>);
}

/// A class which mocks [AppGroupService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppGroupService extends _i1.Mock implements _i8.AppGroupService {
  @override
  _i5.Future<void> saveGroup(_i9.AppGroup? group) => (super.noSuchMethod(
        Invocation.method(
          #saveGroup,
          [group],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateGroup(
    String? key,
    _i9.AppGroup? group,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroup,
          [
            key,
            group,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i9.AppGroup?> getGroup(
    _i9.GroupType? type,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroup,
          [
            type,
            key,
          ],
        ),
        returnValue: _i5.Future<_i9.AppGroup?>.value(),
        returnValueForMissingStub: _i5.Future<_i9.AppGroup?>.value(),
      ) as _i5.Future<_i9.AppGroup?>);

  @override
  _i5.Future<List<_i9.AppGroup>> getGroups(_i9.GroupType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroups,
          [type],
        ),
        returnValue: _i5.Future<List<_i9.AppGroup>>.value(<_i9.AppGroup>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i9.AppGroup>>.value(<_i9.AppGroup>[]),
      ) as _i5.Future<List<_i9.AppGroup>>);

  @override
  _i5.Stream<List<_i9.AppGroup>> streamGroups(_i9.GroupType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroups,
          [type],
        ),
        returnValue: _i5.Stream<List<_i9.AppGroup>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i9.AppGroup>>.empty(),
      ) as _i5.Stream<List<_i9.AppGroup>>);
}

/// A class which mocks [GroupConditionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupConditionService extends _i1.Mock
    implements _i10.GroupConditionService {
  @override
  _i5.Future<_i11.GroupCondition?> getGroupCondition({
    required String? conditionedGroupId,
    required String? conditionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupCondition,
          [],
          {
            #conditionedGroupId: conditionedGroupId,
            #conditionId: conditionId,
          },
        ),
        returnValue: _i5.Future<_i11.GroupCondition?>.value(),
        returnValueForMissingStub: _i5.Future<_i11.GroupCondition?>.value(),
      ) as _i5.Future<_i11.GroupCondition?>);

  @override
  _i5.Future<List<_i11.GroupCondition>> getGroupConditions(
          String? conditionedGroupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupConditions,
          [conditionedGroupId],
        ),
        returnValue: _i5.Future<List<_i11.GroupCondition>>.value(
            <_i11.GroupCondition>[]),
        returnValueForMissingStub: _i5.Future<List<_i11.GroupCondition>>.value(
            <_i11.GroupCondition>[]),
      ) as _i5.Future<List<_i11.GroupCondition>>);

  @override
  _i5.Stream<List<_i11.GroupCondition>> streamGroupConditions(
          String? conditionedGroupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroupConditions,
          [conditionedGroupId],
        ),
        returnValue: _i5.Stream<List<_i11.GroupCondition>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<List<_i11.GroupCondition>>.empty(),
      ) as _i5.Stream<List<_i11.GroupCondition>>);

  @override
  _i5.Future<void> saveGroupCondition(_i11.GroupCondition? groupCondition) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveGroupCondition,
          [groupCondition],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateGroupCondition(_i11.GroupCondition? groupCondition) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGroupCondition,
          [groupCondition],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteGroupCondition(_i11.GroupCondition? groupCondition) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteGroupCondition,
          [groupCondition],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
